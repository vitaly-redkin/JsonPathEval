{"version":3,"sources":["models/JsonModel.ts","defaults/defaults.ts","store/JsonHandler.ts","store/index.ts","util/util.ts","components/error-page/ErrorPage.tsx","components/status-panel/StatusPanel.tsx","components/utils/custom-hooks/CustomHooks.ts","components/file-upload/FileUpload.tsx","components/json-pane/JsonPane.tsx","components/json-path-expr/JsonPathExpr.tsx","components/main/Main.tsx","components/app/App.tsx","store/configureStore.ts","serviceWorker.ts","index.tsx"],"names":["JsonProcessingStatus","defaultJsonStr","defaultJsonObj","JSON","parse","store","book","concat","Array","from","length","ActionTypeEnum","defaultJson","status","Idle","jsonStr","json","pathExpr","selectedPointers","error","initialState","actionCreators","jsonSetStatus","dispatch","type","JsonSetStatus","jsonSetString","JsonSetString","jsonSetObject","JsonSetObject","jsonSetPathExpr","JsonSetPathExpr","jsonSetSearchResult","JsonSetSearchResult","jsonSetError","JsonSetError","JsonHandler","reducers","state","incomingAction","hasError","PAGE_TITLE_TEMPLATE","ErrorPage","className","Helmet","titleTemplate","defaultTitle","Container","Row","Col","connect","props","message","alertColor","Alert","color","render","useSafeState","isMountedRef","React","useRef","useEffect","current","useState","setState","useCallback","newState","useSafeCallback","handler","deps","setError","err","changeHandler","e","target","files","LoadingFile","file","setTimeout","fileReader","FileReader","onloadend","ev","s","result","ParsingFile","onerror","readAsText","htmlFor","id","accept","onChange","tabIndex","theme","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","getClassName","keyPath","pointer","reduceRight","prev","composePointer","find","p","startsWith","labelRenderer","valueRenderer","valueAsString","value","data","invertTheme","setPathExpr","inputRef","focus","doSearch","lodash","path","SearchingJson","sp","JSONPath","resultType","map","search","trim","setSampleExpr","InputGroup","Input","placeholder","innerRef","InputGroupAddon","addonType","Button","onClick","outline","allReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","next","createStore","combineReducers","configureStore","App","undefined","errorInfo","console","log","this","fallback","PureComponent","Boolean","location","hostname","match","ReactGA","process","pathname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b9b622a8.chunk.js","sourcesContent":["\n/**\n * Enum for JSON processing statuses.\n */\nexport enum JsonProcessingStatus {\n  Idle = 'Ready',\n  LoadingFile = 'Loading file...',\n  ParsingFile = 'Parsing file...',\n  SearchingJson = 'Searching JSON...',\n}\n\n/**\n * Class to contain application JSON model.\n */\nexport class JsonModel {\n  /**\n   * Constructor.\n   * \n   * @param status current JSON processing status\n   * @param jsonStr string with JSON\n   * @param json parsed JSON object\n   * @param pathExpr JSON expression to evaluate\n   * @param selectedPointers selected JSON pointers as returned by JSONPath\n   * @param error the last occurred error\n   */\n  constructor(\n    public readonly status: JsonProcessingStatus = JsonProcessingStatus.Idle,\n    public readonly jsonStr: string = '',\n    public readonly json: object = {},\n    public readonly pathExpr: string = '',\n    public readonly selectedPointers: string[],\n    public readonly error: string = '',\n  ) {\n  }\n}\n","/**\n * Module to contain application defaults.\n */\nimport { JsonModel, JsonProcessingStatus } from '../models/JsonModel';\n\n// Default JSON string to use\nconst defaultJsonStr: string = `\n{\n  \"store\": {\n    \"book\": [\n      {\n        \"category\": \"reference\",\n        \"author\": \"Nigel Rees\",\n        \"title\": \"Sayings of the Century\",\n        \"price\": 8.95\n      },\n      {\n        \"category\": \"fiction\",\n        \"author\": \"Evelyn Waugh\",\n        \"title\": \"Sword of Honour\",\n        \"price\": 12.99\n      },\n      {\n        \"category\": \"fiction\",\n        \"author\": \"Herman Melville\",\n        \"title\": \"Moby Dick\",\n        \"isbn\": \"0-553-21311-3\",\n        \"price\": 8.99\n      },\n      {\n        \"category\": \"fiction\",\n        \"author\": \"J. R. R. Tolkien\",\n        \"title\": \"The Lord of the Rings\",\n        \"isbn\": \"0-395-19395-8\",\n        \"price\": 22.99\n      }\n    ],\n    \"bicycle\": {\n      \"color\": \"red\",\n      \"price\": 19.95\n    }\n  }\n  }\n  `;\n\n// Number of times to repeat book array - to provide large-enough sample data\nconst COUNT: number = 300;\n\n// Default JSON object to use\nconst defaultJsonObj: object = JSON.parse(defaultJsonStr);\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(defaultJsonObj as any).store.book = [].concat(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ...Array.from({ length: COUNT }, () => (defaultJsonObj as any).store.book));\n\n\n// Default JSON Path expression \nconst defaultPathExpr: string = '';\n\n/**\n * Default common state.\n */\nexport const defaultJson: JsonModel = new JsonModel(\n  JsonProcessingStatus.Idle,\n  defaultJsonStr,\n  defaultJsonObj,\n  defaultPathExpr,\n  [],\n  '',\n);\n","/**\n * The Redux store stuff for the auth token state.\n */\n\nimport { Reducer } from 'redux';\n\n// eslint-disable-next-line import/no-cycle\nimport { AppThunkAction } from '.';\nimport { defaultJson } from '../defaults/defaults';\nimport { JsonModel, JsonProcessingStatus } from '../models/JsonModel';\n\n/**\n * Interface for the JSON state.\n */\nexport interface IJsonState extends JsonModel {\n}\n\n/**\n * Initial JSON state.\n */\nexport const initialState: IJsonState = {\n  ...defaultJson,\n};\n\n/**\n * Enumeration for the action type strings.\n */\nexport enum ActionTypeEnum {\n  JsonSetStatus = '@@JSON/SET_STATUS',\n  JsonSetString = '@@JSON/SET_STRING',\n  JsonSetObject = '@@JSON/SET_OBJECT',\n  JsonSetPathExpr = '@@JSON/SET_PATH_EXPR',\n  JsonSetSearchResult = '@@JSON/SET_SEARCH_RESULT',\n  JsonSetError = '@@JSON/SET_ERROR',\n\n}\n\n// -----------------\n// ACTIONS\n/**\n * Interface for the JsonSetStatus action.\n */\ninterface IJsonSetStatusAction {\n  type: ActionTypeEnum.JsonSetStatus;\n  status: JsonProcessingStatus;\n}\n\n/**\n * Interface for the JsonSetString action.\n */\ninterface IJsonSetStringAction {\n  type: ActionTypeEnum.JsonSetString;\n  jsonStr: string;\n}\n\n/**\n * Interface for the JsonSetObject action.\n */\ninterface IJsonSetObjectAction {\n  type: ActionTypeEnum.JsonSetObject;\n  json: object;\n}\n\n/**\n * Interface for the JsonSetPathExpr action.\n */\ninterface IJsonSetPathExprAction {\n  type: ActionTypeEnum.JsonSetPathExpr;\n  pathExpr: string;\n}\n\n\n/**\n * Interface for the JsonSetSearchResult action.\n */\ninterface IJsonSetSearchResultAction {\n  type: ActionTypeEnum.JsonSetSearchResult;\n  selectedPointers: string[];\n}\n\n/**\n * Interface for the JsonSetError action.\n */\ninterface IJsonSetErrorAction {\n  type: ActionTypeEnum.JsonSetError;\n  error: string;\n}\n\n/**\n * Declare a 'discriminated union' type. This guarantees that all references\n * to 'type' properties contain one of the declared type strings\n * (and not any other arbitrary string).\n */\nexport type KnownAction = \n  IJsonSetStatusAction | IJsonSetStringAction | \n  IJsonSetObjectAction | IJsonSetPathExprAction |\n  IJsonSetSearchResultAction | IJsonSetErrorAction;\n\n/**\n * ACTION CREATORS.\n * These are functions exposed to UI components that will trigger a state transition.\n */\nexport const actionCreators = {\n  jsonSetStatus: (status: JsonProcessingStatus): AppThunkAction <KnownAction> =>\n    (dispatch: (action: KnownAction) => void): void => {\n      dispatch({ type: ActionTypeEnum.JsonSetStatus, status });\n    },\n\n  jsonSetString: (jsonStr: string): AppThunkAction <KnownAction> =>\n    (dispatch: (action: KnownAction) => void): void => {\n      dispatch({ type: ActionTypeEnum.JsonSetString, jsonStr });\n    },\n\n  jsonSetObject: (json: object): AppThunkAction <KnownAction> =>\n    (dispatch: (action: KnownAction) => void): void => {\n      dispatch({ type: ActionTypeEnum.JsonSetObject, json });\n    },\n\n  jsonSetPathExpr: (pathExpr: string): AppThunkAction <KnownAction> =>\n    (dispatch: (action: KnownAction) => void): void => {\n      dispatch({ type: ActionTypeEnum.JsonSetPathExpr, pathExpr });\n    },\n\n  jsonSetSearchResult: (selectedPointers: string[]): AppThunkAction <KnownAction> =>\n    (dispatch: (action: KnownAction) => void): void => {\n      dispatch({ type: ActionTypeEnum.JsonSetSearchResult, selectedPointers });\n    },\n\n  jsonSetError: (error: string): AppThunkAction <KnownAction> =>\n    (dispatch: (action: KnownAction) => void): void => {\n      dispatch({ type: ActionTypeEnum.JsonSetError, error });\n    },\n};\n\n/**\n * REDUCER - For a given state and action, returns the new state.\n *\n * @param state Current application state\n * @param incomingAction Dispatched Redux action\n *\n * @returns New application state\n */\nexport const reducer: Reducer<IJsonState> = (\n  state: IJsonState | undefined,\n  incomingAction: KnownAction\n): IJsonState => {\n  if (!state) {\n    return initialState;\n  }\n\n  switch (incomingAction.type) {\n    case ActionTypeEnum.JsonSetStatus: {\n      return { \n        ...state, \n        status: incomingAction.status, \n      };\n    }\n    case ActionTypeEnum.JsonSetString: {\n      return { \n        ...state, \n        jsonStr: incomingAction.jsonStr, \n        json: {}, \n        selectedPointers: [],\n        error: '',\n      };\n    }\n    case ActionTypeEnum.JsonSetObject: {\n      return { \n        ...state, \n        json: incomingAction.json, \n        selectedPointers: [],\n        error: '',\n      };\n    }\n    case ActionTypeEnum.JsonSetPathExpr: {\n      return { \n        ...state, \n        pathExpr: incomingAction.pathExpr, \n        selectedPointers: [],\n      };\n    }\n    case ActionTypeEnum.JsonSetSearchResult: {\n      return { \n        ...state, \n        selectedPointers: incomingAction.selectedPointers,\n      };\n    }\n    case ActionTypeEnum.JsonSetError: {\n      const hasError: boolean = !!incomingAction.error;\n\n      return { \n        ...state, \n        error: incomingAction.error, \n        selectedPointers: (hasError ? [] : state.selectedPointers),\n        status: (hasError ? JsonProcessingStatus.Idle : state.status),\n      };\n    }\n    default:\n      // Do nothing - the final return will work\n  }\n\n  // For unrecognized actions (or in cases where actions have no effect),\n  // must return the existing state (or default initial state if none was supplied)\n  return state || initialState;\n};\n","/**\n * The root file of the Redux store.\n */\n// eslint-disable-next-line import/no-cycle\nimport * as JsonHandler from './JsonHandler';\n\n/**\n * Interface for the application state.\n */\nexport interface IApplicationState {\n  json: JsonHandler.IJsonState;\n}\n\n/**\n * Inital application state.\n */\nexport const initialState: IApplicationState = {\n  json: JsonHandler.initialState,\n};\n\n/**\n * ACTION CREATORS.\n * These are functions exposed to UI components that will trigger a state transition.\n */\nexport const actionCreators = {\n  ...JsonHandler.actionCreators,\n};\n\n/**\n * Application reducers.\n */\nexport const reducers = {\n  json: JsonHandler.reducer,\n};\n\n/**\n * This type can be used as a hint on action creators so that its 'dispatch' and\n * 'getState' params are correctly typed to match your store.\n */\nexport type AppThunkAction<TAction> = (\n  dispatch: (action: TAction) => void,\n  getState: () => IApplicationState) => void;\n","/**\n * Utility functions.\n */\n\n /**\n * Default application page title.\n */\nexport const DEFAULT_PAGE_TITLE: string = \n  'JSON Path Evaluator';\n\n/**\n * Application page title template.\n */\nexport const PAGE_TITLE_TEMPLATE: string = `%s | ${DEFAULT_PAGE_TITLE}`;\n","import * as React from 'react';\n\nimport { Helmet } from 'react-helmet';\nimport { Container, Row, Col } from 'reactstrap';\n\nimport { DEFAULT_PAGE_TITLE, PAGE_TITLE_TEMPLATE } from '../../util/util';\n\nimport './ErrorPage.css';\n\n/**\n * The Error Page component.\n */\nfunction ErrorPage(): JSX.Element {\n  /**\n   * Renders component content.\n   */\n  const render = (): JSX.Element => {\n    return (\n      <div className=\"w-100\">\n        <Helmet\n          titleTemplate={PAGE_TITLE_TEMPLATE}\n          defaultTitle={DEFAULT_PAGE_TITLE}\n        />\n\n\n        <div className='error-page'>\n          <Container className='align-self-center'>\n            <Row>\n              <Col className='text-center'>\n                <h3>Thank you for using JSON Path Evaluator</h3>\n              </Col>\n            </Row>\n            <Row>\n              <Col className='text-center'>\n                <p>\n                  We are really sorry but some unexpected problem occurred.\n                  <br />\n                  Our team already notified about this problem and will resolve it a.s.a.p.\n                </p>\n                <p>\n                  Meanwhile please refresh the page and try again to repeat your last action.\n                  {' '}\n                  <br />\n                  If the problem persists please give us some time to fix it.\n                </p>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      </div>\n    );\n  };\n\n  return render();\n}\n\nexport default ErrorPage;\n","import * as React from 'react';\n\nimport { connect } from 'react-redux';\nimport { Row, Col, Alert} from 'reactstrap';\n\nimport { IApplicationState } from '../../store';\nimport { JsonProcessingStatus } from '../../models/JsonModel';\n\nimport './StatusPanel.css';\n\n/**\n * Interface for the component own props.\n */\ninterface IOwnProps{\n  status: JsonProcessingStatus;\n  error: string;\n}\n\n/**\n * Composite type for the component properties.\n */\ntype OwnProps = IOwnProps;\n\n/**\n * The component to show JSON evaluation results.\n */\nfunction StatusPanel(props: OwnProps): JSX.Element {\n  /**\n   * Component render function.\n   */\n  const render = (): JSX.Element => {\n    let message: string = props.status;\n    let alertColor: string = 'info';\n    if (props.error) {\n      message = props.error;\n      alertColor = 'danger';\n    } else if (props.status === JsonProcessingStatus.Idle) {\n      message = 'Select JSON file and enter a JSON Path expression (or copy a sample one)';\n      alertColor = 'success';\n    }   \n\n    return (\n      <Row>\n        <Col>\n          <Alert className=\"w-100\" color={alertColor}>\n            {message}\n          </Alert>\n        </Col>\n      </Row>\n    );\n  }\n\n  return render();\n}\n\n// Redux mapStateToProps function\nfunction mapStateToProps(state: IApplicationState): IOwnProps {\n  return {\n    status: state.json.status,\n    error: state.json.error,\n  };\n}\n\nexport default connect(mapStateToProps)(StatusPanel);\n","import React from 'react';\n\n/**\n * Custom hook similar to useState() which checks\n * if the component is still mounted before calling setState().\n *\n * @param initialState initial state to set\n */\nexport function useSafeState<T>(initialState: T): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const isMountedRef = React.useRef<boolean>(false);\n\n  React.useEffect(() => {\n    isMountedRef.current = true;\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  const [state, setState] = React.useState<T>(initialState);\n  const setSafeState = React.useCallback((newState: T): void => {\n    if (isMountedRef.current) {\n      setState(newState);\n    } /* else {\n        console.log('Unmounted!');\n        console.log(newState);\n      } */\n  }, []);\n\n  return [state, setSafeState];\n}\n\n/**\n * Implements \"safe\" version of the React.useCallback() hook by making sure\n * the exception thrown inside the handler will be handled by the error boundary.\n *\n * @param handler event handler to wrap in a callback\n * @param deps array with callback dependencies\n */\nexport function useSafeCallback(\n  handler: Function,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  deps: Array<any>\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n): (...params: any[]) => void {\n  const [, setError] = useSafeState<Error | null>(null);\n\n  const result = React.useCallback(\n    (...params) => {\n      try {\n        handler(...params);\n      } catch (err) {\n        setError(() => { throw err; });\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps\n  );\n\n  return result;\n}\n","import * as React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport { IApplicationState, actionCreators } from '../../store';\nimport { useSafeCallback as useCallback } from '../utils/custom-hooks/CustomHooks';\nimport { JsonProcessingStatus } from '../../models/JsonModel';\n\n\nimport './FileUpload.css';\n\n/**\n * Interface for the component own props.\n */\ninterface IOwnProps {\n}\n\n/**\n * Composite type for the component properties.\n */\ntype OwnProps = IOwnProps & typeof actionCreators;\n\n\n/**\n * The file upload component.\n */\nfunction FileUpload(props: OwnProps): JSX.Element {\n  const { jsonSetStatus, jsonSetString, jsonSetObject, jsonSetError } = props;\n\n  const changeHandler = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>): void => {\n      if (e.target.files && e.target.files.length) {\n        jsonSetError('');\n        jsonSetStatus(JsonProcessingStatus.LoadingFile);\n        \n        const file: File = e.target.files[0];\n        // Timeout is \"hack\" to let Redux update the store and React to redraw UI after this\n        setTimeout(() => { \n          const fileReader: FileReader = new FileReader();\n\n          fileReader.onloadend = (ev: ProgressEvent<FileReader>): void => {\n            const s: string = ev.target!.result as string;\n            jsonSetString(s);\n            jsonSetStatus(JsonProcessingStatus.ParsingFile);\n        \n            try {\n              const json: object = JSON.parse(s);\n              jsonSetObject(json);\n            } catch (e) {\n              jsonSetError(`File parsing error: ${e}`);\n              jsonSetObject({});\n            }\n            jsonSetStatus(JsonProcessingStatus.Idle);\n          }\n\n          fileReader.onerror = (): void => {\n            jsonSetError(`File loading error: ${fileReader.error}`);\n            jsonSetString('');\n            jsonSetObject({});\n        }\n\n          setTimeout(() => { fileReader.readAsText(file); }, 100);\n        }, 100);\n\n      }\n    },\n    [jsonSetString, jsonSetObject, jsonSetError, jsonSetStatus]\n  );\n\n  /**\n   * Component render function.\n   */\n  const render = (): JSX.Element => {\n    return (\n      <div className=\"json-file-upload\">\n        <label htmlFor=\"json_file_input\">JSON File:</label>\n        <input \n          id=\"json_file_input\"\n          type=\"file\" \n          accept=\"application/json\" \n          onChange={changeHandler}\n          tabIndex={100}\n        />\n      </div>\n    );\n  }\n\n  return render();\n}\n\n\n// Redux mapStateToProps function\nfunction mapStateToProps(state: IApplicationState): IOwnProps {\n  return {\n  };\n}\n\nexport default connect(mapStateToProps, actionCreators)(FileUpload);\n","import * as React from 'react';\n\nimport { connect } from 'react-redux';\nimport JSONTree from 'react-json-tree';\n\nimport { IApplicationState, actionCreators } from '../../store';\n\nimport './JsonPane.css';\n\n/**\n * Interface for the component own props.\n */\ninterface IOwnProps{\n  json: object;\n  selectedPointers: string[];\n}\n\n/**\n * Composite type for the component properties.\n */\ntype OwnProps = IOwnProps & typeof actionCreators;\n\n/**\n * Composes JSONTree node key path parts into JSONPath-compatible pointer.\n * \n * @param keyPath array with JSONTree node key path parts\n */\nfunction composePointer(keyPath: React.ReactText[]): string {\n  return keyPath.reduceRight<string>( \n    (\n      prev: string, \n      current: React.ReactText\n    ): string => `${prev}${current === 'root' ? '' : `/${current}`}`\n    , ''\n  ) + '/';\n}\n\n// Sample JSONTree theme (without it an inversion does not work)\nconst theme = {\n  scheme: 'monokai',\n  author: 'wimer hazenberg (http://www.monokai.nl)',\n  base00: '#272822',\n  base01: '#383830',\n  base02: '#49483e',\n  base03: '#75715e',\n  base04: '#a59f85',\n  base05: '#f8f8f2',\n  base06: '#f5f4f1',\n  base07: '#f9f8f5',\n  base08: '#f92672',\n  base09: '#fd971f',\n  base0A: '#f4bf75',\n  base0B: '#a6e22e',\n  base0C: '#a1efe4',\n  base0D: '#66d9ef',\n  base0E: '#ae81ff',\n  base0F: '#cc6633',\n};\n\n/**\n * The component to show JSON evaluation results.\n */\nfunction JsonPane(props: OwnProps): JSX.Element {\n  /**\n   * Returns class name to use with JSONTree labels and values.\n   * \n   * @param keyPath array with JSONTree node key path parts\n   */\n  const getClassName = (keyPath: React.ReactText[]): string => {\n    const pointer: string = composePointer(keyPath);\n    return (props.selectedPointers.find(p => pointer.startsWith(p)) ? 'selected' : '');\n  }\n \n  /***\n   * JSONTree label renderer.\n   */\n  const labelRenderer = (keyPath: React.ReactText[]): React.ReactNode => {\n    //console.log(composePointer(keyPath));\n    return (\n      <span className={`${getClassName(keyPath)}`}>{keyPath[0]}</span>\n    );\n  };\n\n\n  /***\n   * JSONTree value renderer.\n   */\n  const valueRenderer = (valueAsString: string, value: unknown, ...keyPath: React.ReactText[]): React.ReactNode => {\n    return (\n      <span className={`${getClassName(keyPath)}`}>{valueAsString}</span>\n    );\n  };\n\n  /**\n   * Component render function.\n   */\n  const render = (): JSX.Element => {\n    return (\n      <div className=\"w-100 json-pane\">\n        <JSONTree \n          data={props.json}\n          theme={theme}\n          invertTheme={true}\n          labelRenderer={labelRenderer}\n          valueRenderer={valueRenderer}\n        />\n      </div>\n    );\n  }\n\n  return render();\n}\n\n\n// Redux mapStateToProps function\nfunction mapStateToProps(state: IApplicationState): IOwnProps {\n  return {\n    json: state.json.json,\n    selectedPointers: state.json.selectedPointers,\n  };\n}\n\nexport default connect(mapStateToProps, actionCreators)(JsonPane,);\n","import * as React from 'react';\n\nimport { connect } from 'react-redux';\nimport { Input, InputGroup, InputGroupAddon, Button } from 'reactstrap';\nimport * as lodash from 'lodash';\nimport { JSONPath } from 'jsonpath-plus';\n\nimport { IApplicationState, actionCreators } from '../../store';\nimport { useSafeState as useState, useSafeCallback as useCallback } from '../utils/custom-hooks/CustomHooks';\nimport { JsonProcessingStatus } from '../../models/JsonModel';\n\nimport './JsonPathExpr.css';\n\n/**\n * Interface for the component own props.\n */\ninterface IOwnProps {\n  pathExpr: string;\n  json: object;\n}\n\n/**\n * Composite type for the component properties.\n */\ntype OwnProps = IOwnProps & typeof actionCreators;\n\n\n/**\n * The component to show JSON evaluation results.\n */\nfunction JsonPathExpr(props: OwnProps): JSX.Element {\n  const { jsonSetPathExpr, jsonSetStatus, jsonSetError, jsonSetSearchResult } = props;\n\n  const [pathExpr, setPathExpr] = useState<string>(props.pathExpr);\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(\n    (): void => {\n      if (inputRef && inputRef.current) {\n        inputRef.current.focus();\n      }\n    },\n    []\n  )\n\n  /**\n   * Callback to set the path expression state value.\n   * \n   * @param e event to handle\n   */\n  const changeHandler = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>): void => {\n      setPathExpr(e.target.value);\n    },\n    []\n  );\n\n  /**\n   * Does the JSON path search.\n   * \n   * @param path JSON path to search with\n   */\n  const doSearch = useCallback(\n    lodash.debounce(\n      (path: string): void => {\n        //console.log(`doSearch - <${path}>`);\n        jsonSetPathExpr(path);\n        jsonSetStatus(JsonProcessingStatus.SearchingJson);\n\n        setTimeout(\n          () => {\n            try {\n              //const t1 = new Date().getTime();   \n              const sp: string[] = (JSONPath({\n                path: path, \n                json: props.json,\n                resultType: 'pointer',\n              }) as string[]).map(p => `${p}/`);\n              //const t2 = new Date().getTime();     \n              //console.log(`<${path}> ${sp.length} pointers found in ${t2 - t1}ms`);\n              //console.log(sp);\n              jsonSetSearchResult(sp);\n              jsonSetError('');\n            } catch (e) {\n              jsonSetError(`Error searching in JSON: ${e}`);\n            }\n            jsonSetStatus(JsonProcessingStatus.Idle);\n          }, 200\n        );\n      }\n      , 2000\n    ),\n    [props.json, jsonSetPathExpr, jsonSetStatus, jsonSetError, jsonSetSearchResult]\n  );\n\n  /**\n   * Triggers the JSON path search.\n   */\n  const search = useCallback(\n    (): void => {\n      //console.log(`search - <${pathExpr}>`);\n      doSearch(pathExpr.trim());\n    },\n    [doSearch, pathExpr]\n  );\n\n\n  /**\n   * Sets a sample path expresssion.\n   */\n  const setSampleExpr = useCallback(\n    (): void => {\n      const samplePathExpr: string = '$..[?(@.price<10)]';\n      setPathExpr(samplePathExpr);\n    },\n    []\n  );\n\n  /**\n   * \"Trigger\" to run the search when the path expression changes.\n   */\n  React.useEffect(\n    (): void => {\n      search();\n    },\n    [search, pathExpr]\n  )\n\n  /**\n   * Component render function.\n   */\n  const render = (): JSX.Element => {\n    return (\n      <InputGroup className=\"w-100\">\n        <Input \n          type=\"text\" \n          value={pathExpr}\n          onChange={changeHandler}\n          tabIndex={1}\n          placeholder=\"JSON Path Expression like $..[?(@.price<10)]\"\n          innerRef={inputRef}\n          \n        />\n        <InputGroupAddon addonType=\"append\">\n          <Button onClick={setSampleExpr} color=\"secondary\" outline={true} tabIndex={3}>Use Sample</Button>\n        </InputGroupAddon>\n        <InputGroupAddon addonType=\"append\">\n          <Button onClick={search} color=\"primary\" tabIndex={2}>Search</Button>\n        </InputGroupAddon>\n      </InputGroup>\n    );\n  }\n\n  return render();\n}\n\n\n// Redux mapStateToProps function\nfunction mapStateToProps(state: IApplicationState): IOwnProps {\n  return {\n    pathExpr: state.json.pathExpr,\n    json: state.json.json,\n  };\n}\n\nexport default connect(mapStateToProps, actionCreators)(JsonPathExpr);\n","import * as React from 'react';\n\nimport { Container, Row, Col } from 'reactstrap';\n\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\n\nimport { DEFAULT_PAGE_TITLE, PAGE_TITLE_TEMPLATE } from '../../util/util';\nimport { IApplicationState } from '../../store';\nimport { JsonProcessingStatus } from '../../models/JsonModel';\nimport StatusPanel from '../status-panel/StatusPanel';\nimport FileUpload from '../file-upload/FileUpload';\nimport JsonPane from '../json-pane/JsonPane'\nimport JsonPathExpr from '../json-path-expr/JsonPathExpr';\n\nimport './Main.css';\n\n/**\n * Interface for the component own props.\n */\ninterface IOwnProps{\n  status: JsonProcessingStatus;\n}\n\n/**\n * The main component (to contain everything else).\n */\nfunction Main(props: IOwnProps): JSX.Element {\n  /**\n   * Component render function.\n   */\n  const render = (): JSX.Element => {\n    return (\n      <>\n        <Helmet\n          titleTemplate={PAGE_TITLE_TEMPLATE}\n          defaultTitle={DEFAULT_PAGE_TITLE}\n        />\n\n        <Container className={`main ${props.status !== JsonProcessingStatus.Idle ? 'busy' : ''}`}>\n          <Row>\n            <Col className='text-center'>\n              <h2>JSON Path Evaluator</h2>\n            </Col>\n          </Row>\n          <StatusPanel />\n          <Row>\n            <Col >\n              <FileUpload />\n            </Col>\n          </Row>\n          <Row>\n           <Col>\n              <JsonPathExpr />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <JsonPane />\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n\n  return render();\n}\n\n// Redux mapStateToProps function\nfunction mapStateToProps(state: IApplicationState): IOwnProps {\n  return {\n    status: state.json.status,\n  };\n}\n\nexport default connect(mapStateToProps)(Main);\n","import React, { Suspense } from 'react';\n\nimport { Provider } from 'react-redux';\n\nimport { initialState } from '../../store';\nimport { configureStore, StoreType } from '../../store/configureStore';\nimport ErrorPage from '../error-page/ErrorPage';\nimport Main from '../main/Main';\n\n// Redux store to use in the application\nconst store: StoreType = configureStore(initialState);\n\n/**\n * Interface for the component own state.\n */\ninterface IOwnState {\n  error: Error | undefined;\n}\n\n/**\n * The application root component.\n */\nclass App extends React.PureComponent<{}, IOwnState> {\n  /**\n   * Constructor.\n   */\n  constructor(props: {}) {\n    super(props);\n\n    this.state = { error: undefined, };\n  }\n\n  /**\n   * Catches error raised in the component.\n   *\n   * @param error Exception occurred in the component\n   * @param errorInfo error information\n   */\n  public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    // eslint-disable-next-line no-console\n    console.log('Uncaught exception:');\n    // eslint-disable-next-line no-console\n    console.log(error);\n    // eslint-disable-next-line no-console\n    console.log(errorInfo);\n\n    this.setState({ error, });\n  }\n\n  /**\n   * Renders component UI.\n   */\n  public render(): JSX.Element {\n    if (this.state.error) {\n      return (\n        <Suspense fallback={null}>\n          <ErrorPage />\n        </Suspense>\n      );\n    }\n\n    return (\n      <Suspense fallback={null}>\n        <Provider store={store}>\n          <Main />\n        </Provider>\n      </Suspense>\n    );\n  }\n}\n\nexport default App;\n","/**\n * Redux store configurator.\n */\n\nimport {\n  AnyAction, applyMiddleware, combineReducers, compose, createStore,\n  Reducer, ReducersMapObject, Store, StoreEnhancerStoreCreator\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport { IApplicationState, reducers } from '.';\n\n/**\n * Types for the application Redux store.\n */\nexport type StoreType = Store<IApplicationState>;\n\n/**\n * Global varialble with Redux store.\n */\nexport let store: StoreType | undefined;\n\n/**\n * Configures Redux store.\n *\n * @returns application Redux store\n */\nexport function configureStore(initialState: IApplicationState): StoreType {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  store = composeEnhancers(\n    applyMiddleware(thunk),\n    <S>(next: StoreEnhancerStoreCreator<S>) => next\n  )(createStore)(buildRootReducer(reducers), initialState);\n\n  return store!;\n}\n\n/**\n * Builds the root reducer.\n *\n * @param allReducers Application reducers\n * @returns Root reducer combined from the application ones\n */\nfunction buildRootReducer(allReducers: ReducersMapObject<IApplicationState, AnyAction>):\n  Reducer<IApplicationState> {\n  return combineReducers<IApplicationState>(allReducers);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * Application root component.\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as ReactGA from 'react-ga';\n\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\n\n\nconst gaTrackingId: string = process.env.REACT_APP_GA_TRACKING_ID as string;\nReactGA.initialize(gaTrackingId);\nReactGA.pageview(window.location.pathname + window.location.search);\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}